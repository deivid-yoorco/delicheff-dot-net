@model CategoryModel
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-category-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        Html.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;


    var notFilteredItemsGroups = Model.PagingFilteringContext.SpecificationFilter.NotFilteredItems.GroupBy(x => x.SpecificationAttributeName);
    var alreadyFilteredItemsGroups = Model.PagingFilteringContext.SpecificationFilter.AlreadyFilteredItems.GroupBy(x => x.SpecificationAttributeName);
}
<style>
    @@media (max-width: 801px) {
        .filtered-items {
            display: inline-block;
        }
    }

    @@media screen and (min-width: 800px) {
        .left-container {
            width: 238px !important;
            position: absolute !important;
            right: auto !important;
        }

        .product-filters .collapsible-header {
            display: initial !important;
            padding: 0;
            background-color: #b49759;
            border-bottom: none;
        }

        .product-filters a {
            color: #ffffff;
        }

        .filter-body {
            color: #ffffff !important;
        }

            .filter-body a {
                color: #ffffff;
            }

            .filter-body ul {
                line-height: 25px;
                margin: -3px 0 0 15px !important;
            }

            .filter-body:before {
                content: "";
                border-style: solid;
                border-width: 1px;
                border-color: transparent transparent transparent #dd042b;
            }

            .filter-body:after {
                content: "";
                border-style: solid;
                border-width: 1px;
                border-color: transparent transparent transparent #dd042b;
            }
    }

    #quickshop .refinehead,
    #refinefurther .refinehead {
        position: relative;
        background: #b49759;
        padding: 10px 0 10px 20px !important;
        color: #fff;
        font-size: 1.1em;
        margin: 0;
        z-index: 2;
    }

        #quickshop .refinehead:before,
        #refinefurther .refinehead:before {
            position: absolute;
            content: "";
            right: 0;
            bottom: 100%;
            border-style: solid;
            border-width: 8px 0 0 216px;
            border-color: transparent transparent transparent #b49759;
        }

        #quickshop .refinehead span:after,
        #refinefurther .refinehead span:after {
            position: absolute;
            content: "";
            right: 0;
            top: 100%;
            border-style: solid;
            border-width: 0 0 8px 216px;
            border-color: transparent transparent transparent #b49759;
        }

        #quickshop .refinehead span:before, #refinefurther .refinehead span:before {
            position: absolute;
            content: "";
            right: 100%;
            top: -8px;
            border-style: solid;
            border-width: 0 0 60px 8px;
            border-color: transparent transparent #b49759;
        }
</style>

@*category breadcrumb*@
@section Breadcrumb
    {
    @if (Model.DisplayCategoryBreadcrumb)
    {
        <nav class="white z-depth-0 grey-text">
            <div class="nav-wrapper container">
                <div class="col s12 grey-text">
                    <style>
                        nav {
                            width: 100%;
                            height: auto;
                            line-height: 56px;
                        }

                        @@media(max-width:600px) {
                            .breadcrumb {
                                font-size: 17px;
                            }
                        }
                    </style>
                    <a class="breadcrumb" href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>

                    @foreach (var cat in Model.CategoryBreadcrumb)
                    {
                        var isLastCategory = cat.Id == Model.Id;
                        @if (isLastCategory)
                        {
                            <span class="breadcrumb" title="@cat.Name">@cat.Name</span>
                        }
                        else
                        {
                            <a class="breadcrumb" href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name">@cat.Name</a>
                        }
                    }
                </div>
            </div>
        </nav>
        @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_after_breadcrumb", additionalData = Model.Id })
    }
}

<div id="content-wrapper" class="section col s12 m12 push-l3 l9">
    @if (string.IsNullOrWhiteSpace(Model.Description))
    {
        <h1 class="category-page-title">@Model.Name</h1>
    }

    <div class="category-page-body">
        <style>
            @@media (max-width: 600px) {
                .category-page-body {
                    margin: -7%;
                    margin-top: 0px;
                }
                /*.card-action {
                        height: 5.3em;
                    }*/
            }
        </style>

        @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_top", additionalData = Model.Id })
        @*description*@
        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <style>
                .cat-custom-description img {
                    max-width: 100% !important;
                    height: auto;
                }
            </style>
            <div class="cat-custom-description">
                @Html.Raw(Model.Description)
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_before_subcategories", additionalData = Model.Id })
        @*subcategories*@
        @*@if (Model.SubCategories.Count > 0)
            {
                <div class="section row">
                    @foreach (var item in Model.SubCategories)
                    {
                        <div class="col s6 m4">
                            <div class="card">
                                <div class="card-image">
                                    <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                                        <img alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title">
                                    </a>
                                </div>
                                <div class="card-action">
                                    <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                                        @item.Name
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }*@
        @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_before_featured_products", additionalData = Model.Id })
        @*featured products*@
        @if (Model.FeaturedProducts.Count > 0)
        {
            <div class="section">
                <h4>@T("HomePage.Products")</h4>

                <div class="row">
                    @foreach (var item in Model.FeaturedProducts)
                    {
                        <div class="col s6 m4">
                            @await Html.PartialAsync("_ProductBox", item)
                        </div>
                    }
                </div>
            </div>
        }
        @**sorting*@

        @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_after_featured_products", additionalData = Model.Id })

        @if (Model.SubCategories.Count > 0 && Model.Products.Count > 0)
        {
            @*<div class="col s12 m12">
                    <h4>Productos en esta categoría</h4>
                </div>*@
        }
        <div class="product-filters col s6 m6 hide-on-large-only" style="background: white;padding-bottom: 1%;">
            @*filtering*@
            @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
            {
                @await Html.PartialAsync("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter)
            }
            @*filtering*@
            @if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
            {
                @await Html.PartialAsync("_FilterSpecsBox", Model)
            }
        </div>
        @if (Model.Products.Count > 0)
        {
            <div class="col s6 m6 l12">
                @await Html.PartialAsync("_CatalogSelectors", Model.PagingFilteringContext)
            </div>
        }

        @if (Model.Products.Count > 0)
        {
            @if (Model.PagingFilteringContext.SpecificationFilter.AlreadyFilteredItems.Count > 0)
            {
                <div class="filtered-items teed-primary" style="color:white;padding: 1em;margin-bottom: 1em;">
                    <ul>
                        <li class="title" style="margin-top:1%;">
                            @*@T("Filtering.SpecificationFilter.CurrentlyFilteredBy")*@
                            Se están mostrando productos con las siguientes características:
                        </li>
                        @foreach (var group in alreadyFilteredItemsGroups)
                        {
                            <li class="item margin-li">
                                <strong>@group.First().SpecificationAttributeName</strong>:
                                @group.ToList().Aggregate(string.Empty, (current, next) =>
                                $"{(string.IsNullOrEmpty(current) ? string.Empty : $"{current} {T("Filtering.SpecificationFilter.Separator")}")}{next.SpecificationAttributeOptionName}")
                            </li>
                        }
                    </ul>
                </div>
                <style>
                    .margin-li {
                        margin-left: 5%;
                        margin-top: 1%;
                    }
                </style>
                <div class="remove-filter" style="margin-bottom:1%;margin-top: -1%;">
                    <a href="@Model.PagingFilteringContext.SpecificationFilter.RemoveFilterUrl">Quitar los filtros</a>
                </div>
            }

            <div class="@(Model.PagingFilteringContext.ViewMode == "list" ? "product-list" : "product-grid")">
                <div class="row">
                    @foreach (var item in Model.Products)
                    {
                        <div class="col s6 m4" style="margin-top:2% !important;">
                            @await Html.PartialAsync("_ProductBox", item)
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            @if (Model.PagingFilteringContext.SpecificationFilter.AlreadyFilteredItems.Count > 0)
            {
                <div class="filtered-items">
                    <ul>
                        <li class="title">
                            @*@T("Filtering.SpecificationFilter.CurrentlyFilteredBy")*@
                            No se encontraron productos con las siguientes características:
                        </li>
                        @foreach (var group in alreadyFilteredItemsGroups)
                        {
                            <li class="item margin-li">
                                <strong>@group.First().SpecificationAttributeName</strong>:
                                @group.ToList().Aggregate(string.Empty, (current, next) =>
                                $"{(string.IsNullOrEmpty(current) ? string.Empty : $"{current} {T("Filtering.SpecificationFilter.Separator")}")}{next.SpecificationAttributeOptionName}")
                            </li>
                        }
                    </ul>
                </div>
                <style>
                    .margin-li {
                        margin-left: 5%;
                        margin-top: 1%;
                    }
                </style>
                <div class="remove-filter" style="margin-bottom:1%;margin-top: -1%;">
                    <a href="@Model.PagingFilteringContext.SpecificationFilter.RemoveFilterUrl">Quitar los filtros</a>
                </div>
            }
        }
        @{
            var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
        }
        @if (!pager.IsEmpty())
        {
            <div class="pager">
                @pager
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_bottom", additionalData = Model.Id })
    </div>
</div>
@await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_before_filters", additionalData = Model.Id })
<div id="product" class="product-filters col s12 m12 pull-l9 l3 show-on-large hide-on-med-and-down left-container">
    @if (Model.SubCategories.Count > 0)
    {
        <div id="refinefurther" class="refineblock hide-on-med-and-down">
            <div class="refineBrands refineblock irRefHidden">
                <div class="refinehead irRefClick irRefClose"><span>Filtrar por categoría</span></div>
            </div>
        </div>
        <div class="teed-primary filter-body">
            <ul>
                @foreach (var item in Model.SubCategories)
                {
                    <li>
                        <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                            @item.Name
                        </a>
                    </li>
                }
            </ul>
        </div>
    }

    @*filtering*@
    @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
    {
        @await Html.PartialAsync("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter)
    }
    @*filtering*@
    @if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
    {
        @await Html.PartialAsync("_FilterSpecsBox", Model)
    }

    @*@await Html.PartialAsync("_FilterPriceSlider")*@
</div>
@await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_before_product_list", additionalData = Model.Id })
<script type="text/javascript">
    var t = null;
    $(window).scroll(function () {
        clearTimeout(t);
        t = setTimeout(function () {
            var extra = 0;
            var objectTop = $("#product").position().top;
            var objectHeight = ($("#product").outerHeight());
            var windowScrollTop = $(window).scrollTop();
            var windowHeight = $(window).height();
            var footer = ($(".page-footer").position()).top;
            var result = 0.20 * footer;
            footer = footer - result;

            if ($("#products li.active").length > 0)
                extra = (($("#product .collapsible-header").length) / 2) * 50;

            if (windowHeight >= 900) {
                if (windowScrollTop > objectTop) {
                    if (windowScrollTop <= footer) {
                        $("#product").animate({ 'top': (windowScrollTop + 200) + 'px' }, 100);
                    }
                    else {
                        $("#product").animate({ 'top': footer + 'px' }, 100);
                    }
                }
                else if ((windowScrollTop + windowHeight) < (objectTop + objectHeight)) {
                    if (windowScrollTop >= 300) {
                        $("#product").animate({ 'top': ((windowScrollTop + 200) - 40) + 'px' }, 100);
                    } else {
                        $("#product").animate({ 'top': '300px' }, 100);
                    }
                }
            } else {
                if (windowScrollTop < footer) {
                    if ((windowScrollTop - extra) > objectTop) {
                        if (windowScrollTop <= footer) {
                            $("#product").animate({ 'top': ((windowScrollTop + 200) - 40) + 'px' }, 100);
                        }
                        else {
                            $("#product").animate({ 'top': windowScrollTop + 'px' }, 100);
                        }
                    }
                    else if (((windowScrollTop + windowHeight) + extra) < (objectTop + objectHeight)) {
                        if (windowScrollTop >= 300) {
                            $("#product").animate({ 'top': ((windowScrollTop + 200) - 40) + 'px' }, 100);
                        } else {
                            $("#product").animate({ 'top': '300px' }, 100);
                        }
                    }
                }
                else {
                    $("#product").animate({ 'top': footer + 'px' }, 100);
                }
            }

        }, 100);
    });
</script>