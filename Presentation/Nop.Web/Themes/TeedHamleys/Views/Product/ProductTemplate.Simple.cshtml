@model ProductDetailsModel
@using Microsoft.AspNetCore.Http.Extensions
@using Nop.Core.Domain.Seo;
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject SeoSettings seoSettings
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
    }

    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductOverview.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = false });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }
}
<!--product breadcrumb-->
@section Breadcrumb
    {
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}
@await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_breadcrumb", additionalData = Model.Id })


<div class="product-page">
    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_top", additionalData = Model.Id })
    <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
        <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
            <section class="row product-essential">
                <div class="col s12 m7">
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_pictures", additionalData = Model.Id })
                    @if (Model.Customizable)
                    {
                        @await Html.PartialAsync("_ProductCustomizePictures", Model)
                    }
                    else
                    {
                        <!--product pictures-->
                        @await Html.PartialAsync("_ProductDetailsPictures", Model)
                    }
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_pictures", additionalData = Model.Id })
                </div>
                <div class="col s12 m5">
                    <div class="overview">
                        @await Html.PartialAsync("_Discontinued", Model)
                        <h1 class="product-name">
                            @Model.Name
                        </h1>
                        @if (!string.IsNullOrEmpty(Model.ShortDescription))
                        {
                            <p class="short-description">
                                @Html.Raw(Model.ShortDescription)
                            </p>
                        }
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_overview_top", additionalData = Model.Id })
                        <!--product reviews-->
                        @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                        <!--manufacturers-->
                        @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                        <!--availability-->
                        @await Html.PartialAsync("_Availability", Model)
                        <!--SKU, MAN, GTIN, vendor-->
                        @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)
                        <!--delivery-->
                        @await Html.PartialAsync("_DeliveryInfo", Model)
                        <!--sample download-->
                        @await Html.PartialAsync("_DownloadSample", Model)
                        <!--attributes-->
                        @{
                            var dataDictAttributes = new ViewDataDictionary(ViewData);
                            dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                            @await Html.PartialAsync("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                        }
                        <!--gift card-->
                        @{
                            var dataDictGiftCard = new ViewDataDictionary(ViewData);
                            dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                            @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                        }
                        <!--rental info-->
                        @{
                            var dataDictRental = new ViewDataDictionary(ViewData);
                            dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                            @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                        }
                        <!--price & add to cart-->
                        @{
                            var dataDictPrice = new ViewDataDictionary(ViewData);
                            dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                            @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)

                            @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)

                            var dataDictAddToCart = new ViewDataDictionary(ViewData);
                            dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                            @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                        }
                        @if (Model.ShippingTextEnable)
                        {
                            <p style="margin-top:-4%;">Tiempo de entrega: @(Model.ShippingText != null ? Model.ShippingText : "2 a 5 días hábiles")</p>
                        }
                        <!--wishlist, compare, email a friend-->
                        <div class="overview-buttons">
                            @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_before", additionalData = Model.Id })
                            @{
                                var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                            }
                            @await Html.PartialAsync("_CompareProductsButton", Model)
                            @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                            @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_after", additionalData = Model.Id })
                        </div>
                        <div style="margin-top:3%;vertical-align:middle;">
                            <img src="~/images/Pagos_PayPal_250px.png" alt="" width="170" style="vertical-align:middle;">
                            <img src="~/images/Pagos_RapidSSL_250px.png" alt="" width="70" style="vertical-align:middle;">
                        </div>
                        <div id="providers-images-product" style="vertical-align:middle;"></div>
                        @await Html.PartialAsync("_ShareButton", Model)
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_overview_bottom", additionalData = Model.Id })
                    </div>

                </div>
            </section>

            <section class="full-description">
                @if (!string.IsNullOrEmpty(Model.FullDescription))
                {
                    <div class="full-description" itemprop="description">
                        @Html.Raw(Model.FullDescription)
                    </div>
                }
            </section>
            <section class="product-collateral">
                @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                @await Html.PartialAsync("_ProductTags", Model.ProductTags)
            </section>
            <style>
                @@media (max-width: 600px) {
                    .margin-mobile {
                        margin: -2%;
                    }
                }
            </style>
            @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
            @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
        </div>
        <style>
            @@media (max-width: 600px) {
                .fix-bar {
                    position: fixed;
                    bottom: 0;
                    z-index: 998;
                    width: 100%;
                    height: 8%;
                    left: 0;
                    display: flex;
                    align-items: center;
                }

                .btn-fix-bar {
                    width: 80%;
                    word-wrap: break-word;
                    font-size: 0.74em;
                    line-height: 1.5em;
                    padding-top: 2px;
                }

                .price-fix-bar {
                    color: white;
                    font-size: 1.5em;
                }

                .zopim {
                    bottom: 9% !important;
                }

                .call-us-container {
                    bottom: 6.5% !important;
                }
            }
        </style>
        <div class="show-on-small hide-on-med-and-up row">
            <div class="fix-bar teed-primary" style="background-color:black;">
                <div class="col s6" style="text-align:center;margin-top: -0.12em;">
                    <span class="price-fix-bar"><strong>@Model.ProductPrice.Price</strong></span>
                </div>
                <div class="col s6" style="text-align:center;">
                    @{
                        var addToCartText = T("ShoppingCart.AddToCart").Text;
                        if (Model.ProductOverview.ProductPrice.IsRental)
                        {
                            addToCartText = T("ShoppingCart.Rent").Text;
                        }
                        if (Model.ProductOverview.ProductPrice.AvailableForPreOrder)
                        {
                            addToCartText = T("ShoppingCart.PreOrder").Text;
                        }
                    }
                    @if (Model.ProductOverview.AttributeProduct.Count > 0)
                    {
                        <a href="#modal-attr-@Model.Id" title="@(addToCartText)" class="modal-trigger btn btn-fix-bar teed-primary darken-4" style="color:#ffffff;">
                            <strong>AGREGAR AL CARRITO</strong>
                        </a>
                    }
                    else
                    {
                        <a href="javascript:void(0)" title="@(addToCartText)" id="btnCart-@Model.Id" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" class="btn btn-fix-bar teed-primary darken-4" style="color:#ffffff;">
                            <strong>AGREGAR AL CARRITO</strong>
                        </a>
                    }
                    @*<button class="btn btn-fix-bar teed-primary darken-4" style="background-color:#ffbe4a;">Agregar al carrito</button>*@
                </div>
            </div>
        </div>
    </form>
    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_bottom", additionalData = Model.Id })
</div>
<div id="modal-attr-@Model.Id" class="modal row">
    @await Html.PartialAsync("_ModalAttribute", Model.ProductOverview)
</div>
