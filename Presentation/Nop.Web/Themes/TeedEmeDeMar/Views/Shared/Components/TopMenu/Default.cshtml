@model TopMenuModel
@using Nop.Core
@using Nop.Services.Configuration
@using Nop.Web.Models.HomePageImages
@{
    @inject IStoreContext storeContext
    @inject ISettingService settingsService

    HomePageImagesSettings imagesSettings = settingsService.LoadSetting<HomePageImagesSettings>(storeContext.CurrentStore.Id);

    var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
    var rootCategoriesResponsive = Model.Categories.ToList();
    var responsiveMenuTitle = Model.HasOnlyCategories ? T("Categories") : T("Menu");
}
<div class="navbar-fixed">
    <nav class="white z-depth-1" role="navigation">
        <div class="nav-wrapper container">

            @await Component.InvokeAsync("Logo")
            <ul class="right hide-on-med-and-down">
                @await Component.InvokeAsync("Widget", new { widgetZone = "header_menu_before" })
                @if (Model.DisplayHomePageMenuItem)
                {
                    <li><a href="@Url.RouteUrl("HomePage")">@T("HomePage")</a></li>
                }
                @foreach (var category in rootCategories)
                {
                    var categoryLineModel = new TopMenuModel.CategoryLineModel
                    {
                        Category = category
                    };
                    @await Html.PartialAsync("_CategoryLine.TopMenu", categoryLineModel)
                }
                @foreach (var topic in Model.Topics)
                {
                    <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
                }
                @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
                {
                    <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
                }
                @if (Model.DisplayProductSearchMenuItem)
                {
                    <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
                }
                @if (Model.DisplayCustomerInfoMenuItem)
                {
                    <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
                }
                @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
                {
                    <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
                }
                @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
                {
                    <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
                }
                @if (Model.DisplayContactUsMenuItem)
                {
                    <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
                }
                @if (imagesSettings.ManufacturerEnable)
                {
                    <li><a href="/manufacturer/all">@imagesSettings.TitleManufacturer</a></li>
                }
                @if (imagesSettings.VendorEnable)
                {
                    <li><a href="/vendor/all">@imagesSettings.TitleVendor</a></li>
                }
                @await Component.InvokeAsync("Widget", new { widgetZone = "header_menu_after" })
            </ul>

            <a href="#" data-target="slide-out" class="sidenav-trigger teed-primary-text"><i class="material-icons">menu</i></a>
            <style>
                .sidenav-trigger {
                    margin: 0 0px !important;
                }
            </style>
        </div>
    </nav>
</div>

<ul id="slide-out" class="sidenav">
    @*<div class="menu-toggle">@responsiveMenuTitle</div>*@
    @await Component.InvokeAsync("Widget", new { widgetZone = "mob_header_menu_before" })
    @if (Model.DisplayHomePageMenuItem)
    {
        <li><a href="@Url.RouteUrl("HomePage")">@T("HomePage")</a></li>
    }
    @foreach (var category in rootCategoriesResponsive)
    {
        <li>
            <a href="@Url.RouteUrl("Category", new { SeName = category.SeName })">
                @category.Name
                @if (category.NumberOfProducts.HasValue)
                {
                    <text> </text>@T("Categories.TotalProducts", category.NumberOfProducts.Value)
                }
            </a>
        </li>
    }
    @foreach (var topic in Model.Topics)
    {
        <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
    }
    @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
    {
        <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
    }
    @if (Model.DisplayProductSearchMenuItem)
    {
        <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
    }
    @if (Model.DisplayCustomerInfoMenuItem)
    {
        <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
    }
    @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
    {
        <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
    }
    @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
    {
        <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
    }
    @if (Model.DisplayContactUsMenuItem)
    {
        <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
    }
    @if (imagesSettings.ManufacturerEnable)
    {
        <li><a href="/manufacturer/all">@imagesSettings.TitleManufacturer</a></li>
    }
    @if (imagesSettings.VendorEnable)
    {
        <li><a href="/vendor/all">@imagesSettings.TitleVendor</a></li>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "mob_header_menu_after" })
</ul>

