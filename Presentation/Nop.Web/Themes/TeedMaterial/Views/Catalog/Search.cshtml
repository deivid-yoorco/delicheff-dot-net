@model Nop.Web.Models.Catalog.SearchModel
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.Search").Text);
    //page class
    Html.AppendPageCssClassParts("html-search-page");
}
<script type="text/javascript" asp-location="Footer">
    $(document).ready(function () {
        $("#@Html.IdFor(model => model.adv)").click(toggleAdvancedSearch);
        toggleAdvancedSearch();
    });

    function toggleAdvancedSearch() {
        if ($('#@Html.IdFor(model => model.adv)').is(':checked')) {
            $('#advanced-search-block').show();
        }
        else {
            $('#advanced-search-block').hide();
        }
    }
</script>
<div class="page search-page">
    <h1 class="category-page-title">@T("Search")</h1>
    <div class="page-body">
        <div class="search-input">
            <form asp-route="ProductSearch" method="get">
                <div class="row">
                    <div class="input-field col s8">
                        <input asp-for="q" type="text" />
                        <label asp-for="q">@T("Search.SearchTerm")</label>
                    </div>
                    <div class="input-field col s4">
                        <button type="submit" class="btn">
                            @T("Search.Button")
                        </button>
                    </div>
                </div>
            </form>
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = "productsearch_page_before_results" })
    <div class="search-results">
        @if (!string.IsNullOrEmpty(Model.Warning))
        {
            <div class="warning">
                @Model.Warning
            </div>
        }
        @if (Model.NoResults)
        {
            <div class="no-result">
                @T("Search.NoResultsText")
            </div>
        }
        @if (Model.Products.Count > 0)
        {
            @if (Model.NotFoundOptimized)
            {
                <div class="no-result" style="margin-bottom: 1em; color: red; margin-left: 10px;font-weight: bold">
                    <span>¡Lo sentimos! No encontramos lo que estabas buscando, pero te ofrecemos estas otras opciones:</span>
                </div>
            }
    <div class="@(Model.PagingFilteringContext.ViewMode == "list" ? "product-list" : "product-grid")">
        <div class="row">
            @for (int i = 0; i < Model.Products.Count; i++)
            {
                var product = Model.Products[i];
                product.ListPosition = i;
                product.ListName = "Búsqueda";
                <div class="col s6 m4">
                    @await Html.PartialAsync("_ProductBox", product)
                </div>
            }
        </div>
    </div>
        }
        @{
            var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber").BooleanParameterName("adv").BooleanParameterName("isc").BooleanParameterName("sid").RenderEmptyParameters(true);
        }
        @if (!pager.IsEmpty())
        {
            <div class="pager">
                @pager
            </div>
        }
    </div>
        @await Component.InvokeAsync("HomepageBestSellers")
        @await Component.InvokeAsync("Widget", new { widgetZone = "productsearch_page_after_results" })
    </div>
</div>
