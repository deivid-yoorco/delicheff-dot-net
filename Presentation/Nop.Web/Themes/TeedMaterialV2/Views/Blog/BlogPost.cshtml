@model BlogPostModel
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-blogpost-page");
}
@*@section left {
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_blog_before" })
    @await Component.InvokeAsync("BlogMonths")
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after_blog_archive" })
    @await Component.InvokeAsync("BlogTags")
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_blog_after" })
}*@
<style>
    .blog-comment {
        border-bottom: solid 1px #ccc;
        padding: 15px 0;
    }
    .username {
        font-weight: bold;
    }
</style>
<div class="page blogpost-page">
    @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_top", additionalData = Model.Id })
    <div class="page-title">
        <h1 style="margin-bottom:10px">@Model.Title</h1>
    </div>
    <div class="page-body">
        <div class="post-date">
            @Model.CreatedOn.ToString("D") <span style="color:#ccc">|</span> <a style="font-weight:bold" href="/blog">Ver más recetas</a>
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_before_body", additionalData = Model.Id })
        <div class="post-body">
            @Html.Raw(Model.Body)
        </div>
        @if (Model.Tags.Count > 0)
        {
            <div class="product-tags-box">
                <div class="title" style="margin-top:1%;margin-bottom:1%;">
                    <strong>@T("Products.Tags")</strong>
                </div>
                <style>
                    .btn-small {
                        height: 32.4px;
                        line-height: 32.4px;
                        font-size: 13px;
                        margin-bottom: 1%;
                    }
                </style>
                <div class="product-tags-list">
                    <ul>
                        @for (var i = 0; i < Model.Tags.Count; i++)
                        {
                            var tag = Model.Tags[i];
                            <a href="@Url.RouteUrl("BlogByTag", new {tag = tag})" class="btn-small">@tag</a>
                        }
                    </ul>
                </div>
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_before_comments", additionalData = Model.Id })
        @if (Model.AllowComments)
        {<div class="fieldset new-comment" id="comments">
                <div class="title">
                    <h4>@T("Blog.Comments.LeaveYourComment")</h4>
                </div>
                <div class="notifications">
                    <div asp-validation-summary="ModelOnly" class="message-error"></div>
                    @{
                        var result = TempData["nop.blog.addcomment.result"] as string;
                    }
                    @if (!string.IsNullOrEmpty(result))
                    {
                        <div class="result">@result</div>
                    }
                </div>

                <form asp-route="BlogPost" asp-route-sename="@Model.SeName" method="post">
                    <div class="form-fields">
                        <div class="inputs">
                            <label asp-for="AddNewComment.CommentText" asp-postfix=":"></label>
                            <textarea asp-for="AddNewComment.CommentText" class="enter-comment-text materialize-textarea"></textarea>
                            <span asp-validation-for="AddNewComment.CommentText"></span>
                        </div>
                        @if (Model.AddNewComment.DisplayCaptcha)
                        {
                            <div class="captcha-box">
                                <nop-captcha />
                            </div>
                        }
                    </div>
                    <div class="buttons">
                        <input type="submit" name="add-comment" class="btn blog-post-add-comment-button" value="@T("Blog.Comments.SubmitButton")" />
                    </div>
                </form>
            </div>
            if (Model.Comments.Count > 0)
            {
                <div class="comment-list">
                    <div class="title">
                        <h4>@T("Blog.Comments")</h4>
                    </div>
                    <div class="comments">
                        @foreach (var comment in Model.Comments)
                        {
                            <div class="comment blog-comment">
                                <div class="comment-info">
                                    <div class="user-info">
                                        @if (comment.AllowViewingProfiles)
                                        {
                                            <a href="@Url.RouteUrl("CustomerProfile", new {id = comment.CustomerId})" class="username">@(comment.CustomerName)</a>
                                        }
                                        else
                                        {
                                            <span class="username">@(comment.CustomerName)</span>
                                        }

                                        @if (!string.IsNullOrEmpty(comment.CustomerAvatarUrl))
                                        {
                                            <div class="avatar">
                                                @if (comment.AllowViewingProfiles)
                                                {
                                                    <a href="@Url.RouteUrl("CustomerProfile", new {id = comment.CustomerId})" class="avatar-img-link">
                                                        <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" alt="avatar" />
                                                    </a>
                                                }
                                                else
                                                {
                                                    <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" alt="avatar" />
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="comment-content">
                                    <div class="comment-time">
                                        <label>@T("Blog.Comments.CreatedOn"):</label>
                                        <span class="stat-value">@comment.CreatedOn.ToString("g")</span>
                                    </div>
                                    <div class="comment-body">
                                        @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(comment.CommentText, false, true, false, false, false, false))
                                    </div>
                                </div>
                                @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_inside_comment", additionalData = comment.Id })
                            </div>
                        }
                    </div>
                </div>
            }
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_after_comments", additionalData = Model.Id })
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_bottom", additionalData = Model.Id })
</div>
