@model CustomerNavigationModel
@{
    var currentUrlPath = this.Url.ActionContext.HttpContext.Request.Path.Value;
}

<div class="block block-account-navigation card cel-customer-navigation">
    @*<div class="title">
            <strong>@T("Account.Navigation")</strong>
        </div>*@
    <div class="listbox">
        <div class="row card-content row cel-no-card-shadows">
            <div class="col s12 m5">
                <img style="width: 100%;" src="@(Model.CustomerInfo.ProfilePicture)" class="responsive-img circle" />
            </div>
            <div class="col s12 m7">
                <div class="title">
                    <h5><strong>@string.Join(" ", new List<string> { Model.CustomerInfo.FirstName, Model.CustomerInfo.LastName })</strong></h5>
                </div>
                <div class="row">
                    <div class="col s2">
                        <i class="small material-icons teed-primary-text" style="vertical-align: top;">account_balance_wallet</i>
                    </div>
                    @if (Model.CustomerInfo.RewardsActive)
                    {
                        <div class="col s10" style="font-weight: bold;display: block;font-size:12px;">
                            <span>Tienes @(Math.Round(Model.CustomerInfo.Points, 0)) puntos</span>
                            <br />
                            <span style=" font-size: smaller;">Tu saldo es: @Model.CustomerInfo.Balance.ToString("C")</span>
                        </div>
                    }
                    else
                    {
                        <div class="col s10" style="font-weight: bold;display: flex;font-size:12px;">
                            <span>Tu saldo es: @Model.CustomerInfo.Balance.ToString("C")</span>
                        </div>
                    }
                </div>
            </div>
        </div>
        <ul class="categories-navigation collection cel-no-card-border cel-customer-navigation">
            @await Component.InvokeAsync("Widget", new { widgetZone = "account_navigation_before" })
            <li class="log-out collection-item">
                <a href="@Url.RouteUrl("CustomerPoints")" class="@(Model.SelectedTab == CustomerNavigationEnum.RewardPoints ? "active teed-primary-text" : "inactive grey-text")">
                    <i style="vertical-align: middle;" class="small material-icons">account_balance_wallet</i>
                    @*@T("CustomerPoints")*@
                    Mi monedero
                </a>
            </li>
            <li class="wishlist collection-item">
                <a href="@Url.RouteUrl("Wishlist")" class="inactive grey-text"><i style="vertical-align: middle;" class="small material-icons">favorite</i> @T("Wishlist")</a>
            </li>
            @foreach (var item in Model.CustomerNavigationItems.Where(x => x.RouteName != "CustomerAddresses" && x.RouteName != "CustomerChangePassword" && x.RouteName != "CustomerPoints"))
            {
                string style = item.RouteName == "ShareAndWin" ? "font-weight: bold" : null;
                <li class="@item.ItemClass collection-item" style="@style">
                    @if (item.RouteName == "ShareAndWin")
                    {
                        <a href="@Url.RouteUrl(item.RouteName)" class="@(Model.SelectedTab == item.Tab ? "active" : "inactive")" style="color:#BA3E37">
                            <i style="vertical-align: middle;" class="small material-icons">card_giftcard</i>
                            @( item.Title)
                        </a>
                    }
                    else
                    {
                        <a href="@Url.RouteUrl(item.RouteName)" class="@(Model.SelectedTab == item.Tab ||
                            (item.RouteName == "CustomerInfo" &&
                            (currentUrlPath == "/customer/info" || currentUrlPath == "/customer/addresses" || currentUrlPath == "/customer/changepassword")) ? "active teed-primary-text" : "inactive grey-text")">
                            @if (item.RouteName == "CustomerInfo")
                            {
                                <i style="vertical-align: middle;" class="small material-icons">brightness_low</i>
                            }
                            else if (item.RouteName == "CustomerOrders")
                            {
                                <i style="vertical-align: middle;" class="small material-icons">dehaze</i>
                            }
                            @( item.Title)
                        </a>
                    }
                </li>
            }
            <li class="log-out collection-item">
                <a href="@Url.RouteUrl("Logout")" class="inactive grey-text"><i style="vertical-align: middle;" class="small material-icons">exit_to_app</i> @T("Account.Logout")</a>
            </li>
            @await Component.InvokeAsync("Widget", new { widgetZone = "account_navigation_after" })
        </ul>
    </div>
</div>
