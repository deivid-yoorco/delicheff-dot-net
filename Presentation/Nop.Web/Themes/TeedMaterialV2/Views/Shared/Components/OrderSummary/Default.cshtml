@model ShoppingCartModel
@using Nop.Core
@using Nop.Core.Domain.Tax
@inject IWebHelper webHelper
@inject IWorkContext workContext
@{
    bool IsMoto = false;
    var discountSum = Model.Items.Select(x => x.DiscountValue).DefaultIfEmpty().Sum();
    var IsImpersonating = workContext.OriginalCustomerIfImpersonated != null;
}
<style>
    .terms-of-service {
        margin-top: 10px;
    }
</style>
<div class="order-summary-content">
    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_before" })
    @await Html.PartialAsync("_OrderReviewData", Model.OrderReviewData)
    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li style="color: #ff0000;">@warning</li>
                    }
                </ul>
            </div>
        }
        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
        <form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">
            <div class="table-wrapper hide-on-small-only">
                <table class="cart">
                    <colgroup>
                        @if (Model.IsEditable)
                        {
                            <col width="1" />
                        }
                        @if (Model.ShowSku)
                        {
                            <col width="1" />
                        }
                        @if (Model.ShowProductImages)
                        {
                            <col width="1" />
                        }
                        <col />
                        <col width="1" />
                        <col width="1" />
                        <col width="1" />
                    </colgroup>
                    <thead>
                        <tr>
                            @if (Model.IsEditable)
                            {
                                <th class="remove-from-cart">
                                    @T("ShoppingCart.Remove")
                                </th>
                            }
                            @if (Model.ShowSku)
                            {
                                <th class="sku">
                                    @T("ShoppingCart.SKU")
                                </th>
                            }
                            @if (Model.ShowProductImages)
                            {
                                <th class="product-picture hide-on-small-only">
                                    @T("ShoppingCart.Image")
                                </th>
                                <th class="product-picture hide-on-med-and-up show-on-small" style="height: 9em;padding-top: 4em;">
                                    @T("ShoppingCart.Image")
                                </th>
                            }
                            <th class="product">
                                @T("ShoppingCart.Product(s)")
                            </th>
                            @*<th class="unit-price">
                                    @T("ShoppingCart.UnitPrice")
                                </th>*@
                            <th class="quantity hide-on-small-only" style="width:100px">
                                @T("ShoppingCart.Quantity")
                            </th>
                            <th class="quantity hide-on-med-and-up show-on-small" style="height: 5.8em;padding-top: 2.5em;">
                                @T("ShoppingCart.Quantity")
                            </th>
                            @*@if (discountSum > 0)
                                {
                                    <th class="quantity hide-on-small-only" style="width:100px">
                                        @T("Desct.")
                                    </th>
                                }*@
                            <th class="subtotal">
                                @T("ShoppingCart.ItemTotal")
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            foreach (var item in Model.Items.Where(x => !x.IsExtraCartProduct).ToList())
                            {
                                string quantityDisabled = null;
                                if (item.RewardPointsRequired != 0 || item.GiftProductEnable || (item.IsRewardItem ?? false) || item.SubTotal == "$0.00")
                                {
                                    quantityDisabled = "true";
                                }

                                @if (Nop.Services.TeedCommerceStores.CurrentStore == Nop.Services.TeedStores.Kromtek)
                                {
                                    if (!IsMoto)
                                    {
                                        if (item.Category.Equals("Motos"))
                                        {
                                            IsMoto = true;
                                        }
                                    }
                                }
                                <tr>
                                    @if (Model.IsEditable)
                                    {
                                        <td class="remove-from-cart center-align">
                                            @if (item.DisableRemoval)
                                            {
                                                <text>&nbsp;</text>
                                            }
                                            else
                                            {
                                                <div class="preloader-wrapper small" id="loading-@(item.Id)" style="display:none;">
                                                    <div class="spinner-layer">
                                                        <div class="circle-clipper left">
                                                            <div class="circle"></div>
                                                        </div><div class="gap-patch">
                                                            <div class="circle"></div>
                                                        </div><div class="circle-clipper right">
                                                            <div class="circle"></div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <button type="submit" class="btn-floating btn-small waves-effect waves-light teed-primary" name="updatecart" id="btn-@(item.Id)"
                                                        onclick="registerRemoveFromCart('@item.Sku',
                                '@item.ProductName',
                                '@(string.Join("/", item.ProductCategoryNames))',
                                '@(string.Join(",", item.ProductManufacturerNames))',
                                @decimal.Parse(item.UnitPrice.Replace("$", "")),
                                @item.Quantity)">
                                                    <i class="material-icons">clear</i>
                                                </button>
                                                <input type="checkbox" name="removefromcart" id="remove-@(item.Id)" value="@(item.Id)" class="filled-in" style="display:none;" />
                                            }
                                        </td>
                                    }
                                    @if (Model.ShowSku)
                                    {
                                        <td class="sku">
                                            <span class="sku-number">@item.Sku</span>
                                        </td>
                                    }
                                    @if (Model.ShowProductImages)
                                    {
                                        <td class="product-picture">
                                            @if (!string.IsNullOrEmpty(item.FancyDesign))
                                            {
                                                string src = item.FancyDesign.Split('#').ToArray()[0];
                                                src = src.Split('#').ToArray()[0];
                                                <img alt="@item.Picture.AlternateText" class="responsive-img" src="@src" title="@item.Picture.Title" />
                                            }
                                            else
                                            {
                                                <img alt="@item.Picture.AlternateText" class="responsive-img" src="@item.Picture.ImageUrl" title="@item.Picture.Title" />
                                            }
                                        </td>
                                    }
                                    <td class="product">
                                        <strong>@item.ProductName</strong>
                                        @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                        {
                                            <div class="attributes">
                                                @Html.Raw(item.AttributeInfo)
                                            </div>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(item.SelectedPropertyOption))
                                        {
                                            <div class="attributes">
                                                @(item.SelectedPropertyOption.First().ToString().ToUpper())@(item.SelectedPropertyOption.Substring(1))
                                            </div>
                                        }
                                        @if (!string.IsNullOrEmpty(item.RecurringInfo))
                                        {
                                            <div class="recurring-info">
                                                @Html.Raw(item.RecurringInfo)
                                            </div>
                                        }
                                        @if (!string.IsNullOrEmpty(item.RentalInfo))
                                        {
                                            <div class="rental-info">
                                                @Html.Raw(item.RentalInfo)
                                            </div>
                                        }
                                        @*@if (Model.IsEditable && item.AllowItemEditing)
                                            {
                                                var editCartItemUrl = Url.RouteUrl("Product", new { SeName = item.ProductSeName });
                                                editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid=" + item.Id, null);
                                                <div class="edit-item">
                                                    <a href="@editCartItemUrl">@T("Common.Edit")</a>
                                                </div>
                                            }*@
                                        @if (item.Warnings.Count > 0)
                                        {
                                            <div class="message-error">
                                                <ul>
                                                    @foreach (var warning in item.Warnings)
                                                    {
                                                        <li style="color:#ff0000;">@*El producto ya no está dísponible en nuestro catálogo o está agotado.<br />*@@warning</li>
                                                    }
                                                </ul>
                                            </div>}
                                    </td>
                                    @*<td class="unit-price">
                                            @if (item.EquivalenceCoefficient > 0)
                                            {
                                                <span class="product-unit-price">@item.CustomerEnteredPrice</span>
                                            }
                                            else
                                            {
                                                <span class="product-unit-price">@item.UnitPrice</span>
                                            }
                                        </td>*@
                                    <td class="quantity" style="width: 150px;">
                                        @if (item.IsRewardItem == null)
                                        {
                                            item.IsRewardItem = false;
                                        }
                                        @if (!item.Sku.Contains("Empaque-"))
                                        {
                                            @*<select id="opt-@item.Id">
                                                        var count = item.StockQuantity > 10 ? 10 : item.StockQuantity;
                                                        for (int i = 0; i < count; i++)
                                                        {
                                                            if (item.Quantity == (i + 1))
                                                            {
                                                                <option selected value="@(i + 1)">@(i + 1)</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="@(i + 1)">@(i + 1)</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <input name="itemquantity@(item.Id)" type="text" id="qty-@item.Id" value="@(item.Quantity)" class="qty-input" hidden />*@ @*@if (item.EquivalenceCoefficient > 0 && item.BuyingBySecondary)
                                                {
                                                    var type = "gr";
                                                    var value = (item.Quantity * 1000) / item.EquivalenceCoefficient;
                                                    if (value >= 1000)
                                                    {
                                                        value = value / 1000;
                                                        type = "kg";
                                                    }
                                                    <span>@(value.ToString("0.##")) @type</span>
                                                }
                                                else if (item.WeightInterval > 0)
                                                {
                                                    var type = "gr";
                                                    var value = item.Quantity * item.WeightInterval;
                                                    if (value >= 1000)
                                                    {
                                                        value = value / 1000;
                                                        type = "kg";
                                                    }
                                                    <span>@(value.ToString("0.##")) @type</span>
                                                }
                                                else
                                                {
                                                    <span>@item.Quantity</span>
                                                }*@
                                                <div class="number-input" style="margin-top:0 !important">
                                                    <select disabled="@(quantityDisabled)" class="card-select browser-default selected-qty-@item.Id" onchange="updateCartWithSelectInCart(@item.ProductId, @item.EquivalenceCoefficient, @item.WeightInterval, this, '@item.BuyingBySecondary', '@item.SelectedPropertyOption');
                                                registerAddOrRemoveFromSelectToCart('@item.Sku',
                                                '@item.ProductName.Replace("'", "")',
                                                '@(string.Join("/", item.ProductCategoryNames))',
                                                '@(string.Join(",", item.ProductManufacturerNames))',
                                                @decimal.Parse(item.UnitPrice.Replace("$", "")),
                                                this)">
                                                    </select>
                                                </div>
                                                <script asp-location="Footer">
                                                    cartInitialSetup(@(item.Id), @item.EquivalenceCoefficient, @item.WeightInterval, @item.Quantity, '@(item.BuyingBySecondary.ToString())');
                                                </script>
                                            }
                                            else
                                            {
                                                <input disabled value="@item.Quantity" />
                                            }
                                    </td>
                                    @*@if (discountSum > 0)
                                        {
                                            <td class="discount" style="color:#C53b36; width:100px">
                                                <span class="product-subtotal">
                                                    @item.Discount
                                                </span>
                                            </td>
                                        }*@
                                    <td class="subtotal">
                                        @if (item.GiftProductEnable || (item.IsRewardItem ?? false) == true || item.SubTotal == "$0.00")
                                        {
                                            <span>GRATIS</span>
                                        }
                                        else
                                        {
                                            @if (!string.IsNullOrEmpty(item.Discount))
                                            {
                                                <del><span style="text-decoration:line-through;" class="red-text">@(GetOriginalPrice(item.SubTotal, item.Discount))</span></del>
                                                <div class="discount">
                                                    @T("ShoppingCart.ItemYouSave", "-" + item.Discount)
                                                </div>
                                                <span class="product-subtotal" style="font-weight: bold">
                                                    @item.SubTotal @if (item.RewardPointsRequired > 0)
                                                    {<text> puntos @item.RewardPointsRequired</text>}
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="product-subtotal">
                                                    @item.SubTotal @if (item.RewardPointsRequired > 0)
                                                    {<text> puntos @item.RewardPointsRequired</text>}
                                                </span>
                                            }
                                        }
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            <a class="waves-effect waves-light modal-trigger red-text text-darken-2" style="margin-top: 10px;  font-size: 13px" href="#modal1">Eliminar todos los productos del carrito</a>
            <div id="modal1" class="modal">
                <div class="modal-content">
                    <h4>Eliminar</h4>
                    <p>¿Confirmas que deseas eliminar todos los productos de tu carrito?</p>
                </div>
                <div class="modal-footer">
                    <a href="" class="modal-close waves-effect waves-green btn-flat">Cancelar</a>
                    <a href="/Order/DeleteShopingCart" class="modal-close waves-effect waves-green btn-flat" id="deleteCart">Aceptar</a>
                </div>
            </div>
            @*MOBILE*@
            <div class="show-on-small hide-on-med-and-up">
                <style>
                    .btn-flat i {
                        font-size: 1.5rem !important;
                    }

                    .row-cards {
                        margin-bottom: 0;
                    }

                    .cards-elements {
                        display: flex;
                        justify-content: center;
                        align-items: center;
                    }
                </style>
                @foreach (var item in Model.Items.Where(x => !x.IsExtraCartProduct).ToList())
                {
                    string quantityDisabled = null;
                    if (item.RewardPointsRequired != 0 || item.GiftProductEnable || (item.IsRewardItem ?? false) || item.SubTotal == "$0.00")
                    {
                        quantityDisabled = "true";
                    }

                    if (Nop.Services.TeedCommerceStores.CurrentStore == Nop.Services.TeedStores.Kromtek)
                    {
                        if (!IsMoto)
                        {
                            if (item.Category.Equals("Motos"))
                            {
                                IsMoto = true;
                            }
                        }
                    }

                    <div class="col s12 m12">
                        <div class="card-panel">
                            <div class="row valign-wrapper row-cards">
                                <div class="col s3">
                                    @if (Model.ShowProductImages)
                                    {
                                        <img alt="@item.Picture.AlternateText" class="responsive-img" src="@item.Picture.ImageUrl" title="@item.Picture.Title" />
                                    }
                                </div>
                                <div class="col s9">
                                    <div>
                                        <strong>@item.ProductName</strong>
                                        @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                        {
                                            <div class="attributes">
                                                @Html.Raw(item.AttributeInfo)
                                            </div>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(item.SelectedPropertyOption))
                                        {
                                            <div class="attributes">
                                                @(item.SelectedPropertyOption.First().ToString().ToUpper())@(item.SelectedPropertyOption.Substring(1))
                                            </div>
                                        }
                                        @if (item.Warnings.Count > 0)
                                        {
                                            <div class="message-error">
                                                <ul>
                                                    @foreach (var warning in item.Warnings)
                                                    {
                                                        <li style="color:#ff0000;">@*El producto ya no está dísponible en nuestro catálogo o está agotado.<br />*@@warning</li>
                                                    }
                                                </ul>
                                            </div>
                                        }
                                    </div>
                                    <div class="cards-elements">
                                        <div class="col s2 center">
                                            @if (Model.IsEditable)
                                            {
                                                <div class="remove-from-cart">
                                                    @if (item.DisableRemoval)
                                                    {
                                                        <text>&nbsp;</text>
                                                    }
                                                    else
                                                    {
                                                        <div class="preloader-wrapper small" id="responsive-loading-@(item.Id)" style="display:none;">
                                                            <div class="spinner-layer">
                                                                <div class="circle-clipper left">
                                                                    <div class="circle"></div>
                                                                </div><div class="gap-patch">
                                                                    <div class="circle"></div>
                                                                </div><div class="circle-clipper right">
                                                                    <div class="circle"></div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <button type="submit" class="btn-flat waves-effect waves-light teed-primary-text" name="responsiveupdatecart" id="responsive-btn-@(item.Id)" style="padding:0;">
                                                            <i class="material-icons">delete</i>
                                                        </button>
                                                        <input type="checkbox" name="responsiveremovefromcart" id="responsive-remove-@(item.Id)" value="@(item.Id)" class="filled-in" style="display:none;" />
                                                    }
                                                </div>
                                            }
                                        </div>
                                        <div class="col s6" style="text-align: center">
                                            @*<select id="responsive-opt-@item.Id">
                                                    @{
                                                        var count = item.StockQuantity > 10 ? 10 : item.StockQuantity;
                                                        for (int i = 0; i < count; i++)
                                                        {
                                                            if (item.Quantity == (i + 1))
                                                            {
                                                                <option selected value="@(i + 1)">@(i + 1)</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="@(i + 1)">@(i + 1)</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <input name="responsiveitemquantity@(item.Id)" type="text" id="responsive-qty-@item.Id" value="@(item.Quantity)" class="qty-input" hidden />*@
                                            @*@if (item.EquivalenceCoefficient > 0 && item.BuyingBySecondary)
                                                {
                                                    var type = "gr";
                                                    var value = (item.Quantity * 1000) / item.EquivalenceCoefficient;
                                                    if (value >= 1000)
                                                    {
                                                        value = value / 1000;
                                                        type = "kg";
                                                    }
                                                    <span>@(value.ToString("0.##")) @type</span>
                                                }
                                                else if (item.WeightInterval > 0)
                                                {
                                                    var type = "gr";
                                                    var value = item.Quantity * item.WeightInterval;
                                                    if (value >= 1000)
                                                    {
                                                        value = value / 1000;
                                                        type = "kg";
                                                    }
                                                    <span>@(value.ToString("0.##")) @type</span>
                                                }
                                                else
                                                {
                                                    <span>@item.Quantity</span>
                                                }*@

                                            <div class="number-input" style="margin-top:0 !important;padding:0">
                                                <select disabled="@(quantityDisabled)" class="card-select browser-default selected-qty-@item.Id" onchange="updateCartWithSelectInCart(@item.ProductId, @item.EquivalenceCoefficient, @item.WeightInterval, this, '@item.BuyingBySecondary', '@item.SelectedPropertyOption');
                                            registerAddOrRemoveFromSelectToCart('@item.Sku',
                                            '@item.ProductName',
                                            '@(string.Join("/", item.ProductCategoryNames))',
                                            '@(string.Join(",", item.ProductManufacturerNames))',
                                            @decimal.Parse(item.UnitPrice.Replace("$", "")),
                                            this)">
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col s4">
                                            <strong>Precio: </strong>
                                            <span class="product-subtotal">
                                                @if (item.GiftProductEnable || (item.IsRewardItem ?? false) == true || item.SubTotal == "$0.00")
                                                {
                                                    <text>
                                                        GRATIS
                                                    </text>
                                                }
                                                else
                                                {
                                                    @if (!string.IsNullOrEmpty(item.Discount))
                                                    {
                                                        <del><span style="text-decoration:line-through;" class="red-text">@(GetOriginalPrice(item.SubTotal, item.Discount))</span></del>
                                                        <div class="discount">
                                                            @T("ShoppingCart.ItemYouSave", "-" + item.Discount)
                                                        </div>
                                                        <span class="product-subtotal" style="font-weight: bold">
                                                            @item.SubTotal @if (item.RewardPointsRequired > 0)
                                                            {<text> puntos @item.RewardPointsRequired</text>}
                                                        </span>
                                                    }
                                                    else
                                                    {
                                                        <span class="product-subtotal">
                                                            @item.SubTotal @if (item.RewardPointsRequired > 0)
                                                            {<text> puntos @item.RewardPointsRequired</text>}
                                                        </span>
                                                    }
                                                }
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                @foreach (var item in Model.Items)
                {
                    <script type="text/javascript" asp-location="Footer">
                    $('#responsive-opt-@item.Id').change(function () {
                        var v = $('#responsive-opt-@item.Id').val();
                        $('#responsive-qty-@item.Id').val(v);

                        var url = '@Url.Action("ResponsiveUpdateCartAjax", "ShoppingCart")';
                        var data = $('#shopping-cart-form').serialize();
                        $.ajax({
                            url: url,
                            data: data,
                            type: 'POST',
                            success: function (result) {
                                location.reload();
                            },
                            //complete: this.resetLoadWaiting,
                            error: function (error) {
                                $("#error").empty();
                                $("#error").append("Ocurrió un error inesperado.");
                            }
                        });
                    });
                    </script>
                }
                @foreach (var item in Model.Items)

                {
                    <script type="text/javascript" asp-location="Footer">
                        $('#responsive-btn-@(item.Id)').click(function () {
                            $('input[id=responsive-remove-@(item.Id)]').prop('checked', true);
                            $('#responsive-btn-@(item.Id)').hide();
                            $('#responsive-loading-@(item.Id)').addClass('active');
                            $('#responsive-loading-@(item.Id)').show();
                        });
                    </script>
                }
            </div>
            @await Component.InvokeAsync("ExtraCartProducts")
            @foreach (var item in Model.Items)
            {
                <script type="text/javascript" asp-location="Footer">
                    $('#opt-@item.Id').change(function () {
                        var v = $('#opt-@item.Id').val();
                        $('#qty-@item.Id').val(v);

                        var url = '@Url.Action("UpdateCartAjax","ShoppingCart")';
                        var data = $('#shopping-cart-form').serialize();
                        $.ajax({
                            url: url,
                            data: data,
                            type: 'POST',
                            success: function (result) {
                                location.reload();
                            },
                            //complete: this.resetLoadWaiting,
                            error: function (error) {
                                $("#error").empty();
                                $("#error").append("Ocurrió un error inesperado.");
                            }
                        });
                    });
                </script>
            }
            @foreach (var item in Model.Items)
            {
                <script type="text/javascript" asp-location="Footer">
                    $('#btn-@(item.Id)').click(function () {
                        $('input[id=remove-@(item.Id)]').prop('checked', true);
                        $('#btn-@(item.Id)').hide();
                        $('#loading-@(item.Id)').addClass('active');
                        $('#loading-@(item.Id)').show();
                    });
                </script>
            }
            @if (Model.IsEditable && Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
            {
                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <div class="tax-shipping-info">
                    @T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                </div>
            }


            <!-- Delete Shoping Cart -->
            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    var elems = document.querySelectorAll('.modal');
                    var instances = M.Modal.init(elems, options);
                });
                $(document).ready(function () {
                    $('.modal').modal();
                });
            </script>

            <div class="row section">
                @if (Model.IsEditable)
                {
                    @if (((string.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && string.IsNullOrEmpty(Model.MinOrderTotalWarning)) || IsImpersonating) && !Model.HideCheckoutButton)
                    {
                        <div class="col s12 right-align">
                            @if (IsMoto)
                            {
                                <a class="waves-effect waves-light btn modal-trigger" href="#modal-motos">Pagar</a>
                            }
                            else
                            {
                                <div id="modal-terms-top" class="modal">
                                    <div class="modal-content center">
                                        <h4>@T("Checkout.TermsOfService")</h4>
                                        <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                                    </div>
                                    <div class="modal-footer">
                                        <a href="#!" class="modal-close waves-effect waves-green btn-flat">Cerrar</a>
                                    </div>
                                </div>
                                <div id="terms-of-service-warning-box" title="@T("Checkout.TermsOfService")" style="display: none;">
                                    <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                                </div>
                                <style>
                                    @* [type=checkbox]:checked, [type=checkbox]:not(:checked) {
                                        position: relative;
                                        opacity: inherit;
                                        pointer-events: all;
                                        vertical-align: middle;
                                    } *@
                                </style>
                                <script type="text/javascript" asp-location="Footer">
                                    $(document).ready(function () {
                                        $('#checkout-top').click(function () {
                                            //$('#modal-terms-top').modal();
                                            ////terms of service
                                            //var termOfServiceOk = true;
                                            //if ($('#termsofservice-top').length > 0) {
                                            //    //terms of service element exists
                                            //    if (!$('#termsofservice-top').is(':checked')) {
                                            //        //$("#terms-of-service-warning-box").dialog();
                                            //        $('#modal-terms-top').modal('open');
                                            //        $('#warn').modal('close');
                                            //        termOfServiceOk = false;
                                            //    } else {
                                            //        termOfServiceOk = true;
                                            //    }
                                            //}
                                            //return termOfServiceOk;
                                            return true;
                                        });
                                    });

                                    $('#termsofservice-top').change(function () {
                                        if ($('#termsofservice-top').is(':checked')) {
                                            $('#termsofservice').prop("checked", true);
                                        } else {
                                            $('#termsofservice').prop("checked", false);
                                        }
                                    });
                                </script>
                                if (Model.Items.Where(x => x.Warnings.Count() > 0).Any())
                                {
                                    <div class="terms-of-service">
                                        <label style="color:#ff0000;" for="termsofservice-top">Hay algunos productos en tu carrito que ya no están disponibles, por favor elimínalos para poder continuar.</label>
                                    </div>
                                }
                                <button disabled="@Model.Items.Where(x => x.Warnings.Count() > 0).Any()" type="submit" id="checkout-top" name="checkout" value="checkout" class="btn-large waves-effect waves-light" style="margin-top:10px;">
                                    Continuar
                                </button>
                                <div class="terms-of-service">
                                    @*<input id="termsofservice-top" type="checkbox" name="termsofservice" />*@
                                    <label for="termsofservice">Al dar clic en continuar, aceptas nuestros términos y condiciones </label>
                                    <a href="@Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("conditionsofuse") })" target="_blank">@T("Checkout.TermsOfService.Read")</a>
                                </div>
                            }
                        </div>
                    }
                    @*<div class="col s12 right-align shopping-cart-action-buttons">
                            @*<button type="submit" class="btn btn-small waves-effect waves-light" name="updatecart">
                                    @T("ShoppingCart.UpdateCart")
                                </button>*
                            <button type="submit" class="btn-flat waves-effect waves-light" name="continueshopping">
                                @T("ShoppingCart.ContinueShopping")
                            </button>
                        </div>*@
                }
                @if (Model.IsEditable)
                {
                    @await Html.PartialAsync("_CheckoutAttributes", Model)
                }
                @await Component.InvokeAsync("SelectedCheckoutAttributes")
            </div>
            <div class="cart-footer row">
                @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_cart_footer" })
                @if (Model.IsEditable)
                {
                    <div class="cart-collaterals col s12 m6">
                        <div class="deals">
                            @await Html.PartialAsync("_DiscountBox", Model.DiscountBox)
                            @await Html.PartialAsync("_GiftCardBox", Model.GiftCardBox)
                            @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_deals" })
                        </div>
                        @await Component.InvokeAsync("EstimateShipping")
                    </div>
                    <div class="totals col s12 m6">
                        @await Component.InvokeAsync("OrderTotals", new { isEditable = Model.IsEditable })
                        @if (Model.IsEditable && !IsImpersonating)
                        {
                            if (!string.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                            {
                                <div class="min-amount-warning">
                                    @Model.MinOrderSubtotalWarning
                                </div>
                            }
                            if (!string.IsNullOrEmpty(Model.MinOrderTotalWarning))
                            {
                                <div class="min-amount-warning">
                                    @Model.MinOrderTotalWarning
                                </div>
                            }
                        }
                        @if (Model.IsEditable)
                        {
                            @if (((string.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && string.IsNullOrEmpty(Model.MinOrderTotalWarning)) || IsImpersonating) && !Model.HideCheckoutButton)
                            {
                                @if (Nop.Services.TeedCommerceStores.CurrentStore == Nop.Services.TeedStores.Kromtek)
                                {
                                    <!-- Modal Structure -->
                                    <div id="modal-motos" class="modal">
                                        <div class="modal-content">
                                            <h4>Importante</h4>
                                            <p>Para el envío de las motos debes comunicarte con nosotros a través de nuestra <a href="https://www.kromtekstore.com/contactus" target="_blank">sección de contacto</a> o llamando al teléfono:  <strong>01-800-570-6835</strong>  </p>
                                        </div>
                                        <div class="modal-footer" style="margin-left:-7px;">
                                            <a href="#!" class="modal-close waves-effect waves-green btn">Cerrar</a>
                                        </div>
                                    </div>
                                }
                                <div class="col s12 right-align">
                                    @if (IsMoto)
                                    {
                                        <a class="waves-effect waves-light btn modal-trigger" href="#modal-motos" style="margin-top:2%;">Pagar</a>
                                    }
                                    else
                                    {
                                        <div id="modal-terms" class="modal">
                                            <div class="modal-content center">
                                                <h4>@T("Checkout.TermsOfService")</h4>
                                                <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                                            </div>
                                            <div class="modal-footer">
                                                <a href="#!" class="modal-close waves-effect waves-green btn-flat">Cerrar</a>
                                            </div>
                                        </div>
                                        <div id="terms-of-service-warning-box" title="@T("Checkout.TermsOfService")" style="display: none;">
                                            <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                                        </div>
                                        <style>
                                            @* [type=checkbox]:checked, [type=checkbox]:not(:checked) {
                                                position: relative;
                                                opacity: inherit;
                                                pointer-events: all;
                                                vertical-align: middle;
                                            } *@
                                        </style>
                                        <script type="text/javascript" asp-location="Footer">
                                            $(document).ready(function () {
                                                $('#checkout').click(function () {
                                                    //$('#modal-terms').modal();
                                                    ////terms of service
                                                    //var termOfServiceOk = true;
                                                    //if ($('#termsofservice').length > 0) {
                                                    //    //terms of service element exists
                                                    //    if (!$('#termsofservice').is(':checked')) {
                                                    //        //$("#terms-of-service-warning-box").dialog();
                                                    //        $('#modal-terms').modal('open');
                                                    //        $('#warn').modal('close');
                                                    //        termOfServiceOk = false;
                                                    //    }
                                                    //    else {
                                                    //        termOfServiceOk = true;
                                                    //    }
                                                    //}
                                                    //return termOfServiceOk;
                                                    return true;
                                                });
                                            });
                                        </script>
                                        if (Model.Items.Where(x => x.Warnings.Count() > 0).Any())
                                        {
                                            <div class="terms-of-service">
                                                <label style="color:#ff0000;" for="termsofservice-top">Hay algunos productos en tu carrito que ya no están disponibles, por favor elimínalos para poder continuar.</label>
                                            </div>
                                        }
                                        <button disabled="@Model.Items.Where(x => x.Warnings.Count() > 0).Any()" type="submit" id="checkout" name="checkout" value="checkout" class="btn-large waves-effect waves-light modal-trigger" style="margin-top:10px;">
                                            Continuar
                                        </button>
                                        <div class="terms-of-service">
                                            @*<input id="termsofservice" type="checkbox" name="termsofservice" />*@
                                            <label for="termsofservice">Al dar clic en continuar, aceptas nuestros términos y condiciones </label>
                                            <a href="@Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("conditionsofuse") })" target="_blank">@T("Checkout.TermsOfService.Read")</a>
                                        </div>

                                        <div class="modal" id="warn">
                                            <div class="modal-content">
                                                Algún producto en tu carrito no está publicado en nuestro catálogo o está agotado.
                                            </div>
                                            <div class="modal-footer">
                                                <a href="#!" class="modal-close waves-effect waves-green btn-flat">Ok</a>
                                            </div>
                                        </div>
                                        <div style="margin-top:2%;vertical-align:middle;text-align:right">
                                            <img src="~/images/Pagos_PayPal_250px.png" alt="Paypal" width="150" style="vertical-align:middle;">
                                            <div id="providers-images-payment" style="margin-top:2%;vertical-align:middle;text-align:right;"></div>
                                        </div>
                                        <style>
                                            .sold-out-product {
                                                padding-top: 4em;
                                                text-align: center;
                                                color: red;
                                                display: block !important;
                                            }
                                        </style>
                                        @foreach (var item in Model.Items)
                                        {
                                            if (item.StockQuantity == 0)
                                            {
                                                <div class="sold-out-product">
                                                </div>
                                                <script type="text/javascript" asp-location="Footer">
                                                    //$(document).ready(function () {
                                                    //    $('.modal').modal();
                                                    //});

                                                    //$('#checkout').click(function () {
                                                    //    $('#warn').addClass('sold-out-product');
                                                    //    $('#warn').modal('open');
                                                    //});
                                                    //$('#checkout-top').click(function () {
                                                    //    $('#warn').addClass('sold-out-product');
                                                    //    $('#warn').modal('open');
                                                    //});
                                                </script>
                                            }
                                        }
                                    }
                                </div>
                            }
                            <div class="addon-buttons">
                                @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
                                @foreach (var pm in Model.ButtonPaymentMethodViewComponentNames)
                                {
                                    @await Component.InvokeAsync(pm)
                                }
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="col s12 m8"></div>
                    <div class="totals col s12 m4">
                        @await Component.InvokeAsync("OrderTotals", new { isEditable = Model.IsEditable })
                        @if (Model.IsEditable && !IsImpersonating)
                        {
                            if (!string.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                            {
                                <div class="min-amount-warning">
                                    @Model.MinOrderSubtotalWarning
                                </div>
                            }
                            if (!string.IsNullOrEmpty(Model.MinOrderTotalWarning))
                            {
                                <div class="min-amount-warning">
                                    @Model.MinOrderTotalWarning
                                </div>
                            }
                        }
                        @if (Model.IsEditable)
                        {
                            <div class="row section">
                                @if (((string.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && string.IsNullOrEmpty(Model.MinOrderTotalWarning)) || IsImpersonating) && !Model.HideCheckoutButton)
                                {
                                    <div class="col s12 right-align">
                                        <button type="submit" id="checkout" name="checkout" value="checkout" class="btn btn-small waves-effect waves-light">
                                            @T("Checkout.Button")
                                        </button>
                                        @if (Model.TermsOfServiceOnShoppingCartPage)
                                        {
                                            <br />
                                            <label>
                                                <span>@T("Checkout.TermsOfService.IAccept") <a href="@Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("conditionsofuse") })" target="_blank" id="read-terms">@T("Checkout.TermsOfService.Read")</a></span>
                                            </label>
                                        }
                                    </div>
                                }
                            </div>
                            <div class="addon-buttons">
                                @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
                                @foreach (var pm in Model.ButtonPaymentMethodViewComponentNames)
                                {
                                    @await Component.InvokeAsync(pm)
                                }
                            </div>
                        }
                    </div>
                }

            </div>
            @if (Model.IsEditable)
            {
                @await Component.InvokeAsync("CrossSellProducts")
            }
        </form>
    }
    else
    {
        <div class="section">
            <div class="card horizontal">
                <div class="card-stacked">
                    <div class="card-content" style="font-size:16px;">
                        @T("ShoppingCart.CartIsEmpty")
                    </div>
                </div>
            </div>

            <div>
                @await Component.InvokeAsync("HomepageBestSellers")
            </div>
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_after" })
</div>

<script>
    function cartInitialSetup(id, coefficient, weightInterval, qty, buyingBySec) {
        buyingBySec = buyingBySec == "False" ? false : true;
        var newValue = qty;
        var select = $(".selected-qty-" + id);
        select.empty();
        for (var j = 0; j < select.length; j++) {
            var type = buyingBySec || weightInterval > 0 ? "gr" : "pz";
            var options = select[j].options;
            if (buyingBySec && coefficient > 0) {
                for (var i = 0; i <= 50; i++) {
                    var value = qty;
                    value = ((i * 1000) / coefficient).toFixed(2);
                    if (value >= 1000) {
                        value = (value / 1000).toFixed(2);
                        type = " kg";
                    }
                    var option = new Option(value + type, i);
                    options.add(option);
                }
            }
            else if (weightInterval > 0) {
                for (var w = 0; w <= 50; w++) {
                    var weightValue = qty;
                    weightValue = (w * weightInterval).toFixed(2);
                    if (weightValue >= 1000) {
                        weightValue = (weightValue / 1000).toFixed(2);
                        type = " kg";
                    }
                    var optionWeight = new Option(weightValue + type, w);
                    options.add(optionWeight);
                }
            }
            else {
                for (var e = 0; e <= 50; e++) {
                    var newOption = new Option(e + " " + type, e);
                    options.add(newOption);
                }
            }
        }

        $(".selected-qty-" + id).find('option[value=' + parseInt(newValue) + ']').prop('selected', true);
    }

    function updateCartWithSelectInCart(id, coefficient, weightInterval, element, buyingBySec, selectedProp) {
        displayAjaxLoading(true);

        var newValue = parseInt($(element).val());
        var buyingBySecondary = buyingBySec == 'False' ? false : true;
        var selectedProperty = selectedProp;

        $.ajax({
            cache: false,
            url: '/shoppingcart/UpdateProductQty_Catalog?productId=' + id + '&buyingBySecondary=' + buyingBySecondary + '&qty=' + newValue + '&selectedPropertyOption=' + selectedProperty,
            type: 'get',
            success: function () {
                location.reload();
            },
            error: function (e) {
                console.log(e);
                alert("No se pudo actualizar la cantidad");
            }
        });
    }
</script>
@functions{
    public string GetOriginalPrice(string newPriceString, string discountString)
    {
        decimal.TryParse(newPriceString.Replace("$", ""), out decimal newPrice);
        decimal.TryParse(discountString.Replace("$", ""), out decimal discount);

        if (newPrice == 0 && discount == 0)
        {
            return newPriceString;
        }

        return (newPrice + discount).ToString("C");
    }
}