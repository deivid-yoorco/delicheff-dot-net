@model ProductReviewsModel
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(Model.ProductName);
    Html.AddTitleParts(T("PageTitle.ProductReviews").Text);
    //page class
    Html.AppendPageCssClassParts("html-product-reviews-page");
}
<div class="page product-reviews-page section">
    <div class="">
        <h1 class="category-page-title">@T("Reviews.ProductReviewsFor") <a href="@Url.RouteUrl("Product", new { SeName = Model.ProductSeName })">@Model.ProductName</a></h1>
    </div>
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = "productreviews_page_top", additionalData = Model.ProductId })
        @if (Model.AddProductReview.SuccessfullyAdded)
        {
            <div class="result">
                @Model.AddProductReview.Result
            </div>
        }
        else
        {
            <div class="write-review" id="review-form">
                <div class="title">
                    <strong>@T("Reviews.Write")</strong>
                </div>
                <form asp-route="ProductReviews" method="post">
                    <div asp-validation-summary="ModelOnly" class="message-error"></div>
                    <div class="fieldset">
                        <div class="form-fields">
                            <div class="input-field">
                                <label asp-for="AddProductReview.Title" asp-postfix=":">*@Html.DisplayNameFor(model => model.AddProductReview.Title)</label>
                                <input asp-for="AddProductReview.Title" class="review-title" asp-disabled="@(!Model.AddProductReview.CanCurrentCustomerLeaveReview)" />
                                <span asp-validation-for="AddProductReview.Title" class="helper-text red-text"></span>
                            </div>
                            <div class="input-field">
                                <label asp-for="AddProductReview.ReviewText" asp-postfix=":">*@Html.DisplayNameFor(model => model.AddProductReview.ReviewText)</label>
                                <textarea asp-for="AddProductReview.ReviewText" class="materialize-textarea" asp-disabled="@(!Model.AddProductReview.CanCurrentCustomerLeaveReview)"></textarea>
                                <span asp-validation-for="AddProductReview.ReviewText" class="helper-text red-text"></span>
                            </div>

                            <div class="review-rating center-align">
                                <label asp-for="AddProductReview.Rating" asp-postfix=":"></label>
                                <ul>
                                    <li class="rating-options">
                                        <label class="red-text"><strong>@T("Reviews.Fields.Rating.Bad")</strong></label>
                                        <label>
                                            <input asp-for="AddProductReview.Rating" value="1" type="radio" id="addproductrating_1" class="with-gap" />
                                            <span></span>
                                        </label>
                                        <label>
                                            <input asp-for="AddProductReview.Rating" value="2" type="radio" id="addproductrating_2" class="with-gap" />
                                            <span></span>
                                        </label>
                                        <label>
                                            <input asp-for="AddProductReview.Rating" value="3" type="radio" id="addproductrating_3" class="with-gap" />
                                            <span></span>
                                        </label>
                                        <label>
                                            <input asp-for="AddProductReview.Rating" value="4" type="radio" id="addproductrating_4" class="with-gap" />
                                            <span></span>
                                        </label>
                                        <label>
                                            <input asp-for="AddProductReview.Rating" value="5" type="radio" id="addproductrating_5" class="with-gap" />
                                            <span></span>
                                        </label>
                                        <label class="green-text"><strong>@T("Reviews.Fields.Rating.Excellent")</strong></label>
                                    </li>

                                </ul>
                            </div>
                            @if (Model.AddProductReview.DisplayCaptcha)
                            {
                                <div class="captcha-box">
                                    <nop-captcha />
                                </div>
                            }
                        </div>
                    </div>
                    <div class="buttons center-align">
                        <input type="submit" name="add-review" class="btn write-product-review-button" value="@T("Reviews.SubmitButton")" />
                    </div>
                </form>
            </div>
        }
        @if (Model.Items.Count > 0)
        {
            <div class="product-review-list ">
                <div class="title center-align">
                    <strong>@T("Reviews.ExistingReviews")</strong>
                </div>
                @foreach (var review in Model.Items)
                {
                    var ratingPercent = review.Rating * 20;

                    <div class="card-panel product-reviews-overview row">
                        <div class="review-item-head  col l12">
                            <div class="review-title col l6">
                                <strong>@review.Title</strong>
                            </div>
                            <div class="product-review-box col l3 offset-l3">
                                <div class="rating">
                                    <div style="width: @(ratingPercent)%">
                                    </div>
                                    <span class="product-description-rating">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= review.Rating)
                                            {
                                                <i class="material-icons">star</i>
                                            }
                                            else
                                            {
                                                <i class="material-icons">star_border</i>
                                            }
                                        }
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="review-content col l12">
                            <div class="review-text col l12">
                                @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReviewText, false, true, false, false, false, false))
                            </div>
                            <div class="review-info col l12">
                                <span class="user">
                                    <label>@T("Reviews.From"):</label>
                                    @if (review.AllowViewingProfiles)
                                    {
                                        <a href="@Url.RouteUrl("CustomerProfile", new { id = review.CustomerId })">@(review.CustomerName)</a>
                                    }
                                    else
                                    {
                                        @review.CustomerName
                                    }
                                </span>
                                <span class="separator">|</span>
                                <span class="date">
                                    <label>@T("Reviews.Date"):</label>
                                    <span>@review.WrittenOnStr</span>
                                </span>
                            </div>
                            @await Html.PartialAsync("_ProductReviewHelpfulness", review.Helpfulness)
                            @await Component.InvokeAsync("Widget", new { widgetZone = "productreviews_page_inside_review", additionalData = review.Id })
                            @if (!string.IsNullOrEmpty(review.ReplyText))
                            {
                                <div class="reply">
                                    <div class="reply-header">
                                        @T("Reviews.Reply")
                                    </div>
                                    <div class="reply-text">
                                        @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReplyText, false, true, false, false, false, false))
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = "productreviews_page_bottom", additionalData = Model.ProductId })
    </div>
</div>
